435. Non-overlapping Intervals

Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Note that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.

SOLUTION -:

class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if (intervals.empty()) return 0;

        // Step 1: Sort intervals by end time
        sort(intervals.begin(), intervals.end(), [](const vector<int> &a, const vector<int> &b) {
            return a[1] < b[1];
        });

        int count = 0;
        int prevEnd = intervals[0][1]; // Keep the end of last non-overlapping interval

        // Step 2: Loop through intervals from second one
        for (int i = 1; i < intervals.size(); i++) {
            if (intervals[i][0] < prevEnd) {
                // Overlap found → remove this interval (increment count)
                count++;
            } else {
                // No overlap → update prevEnd to this interval's end
                prevEnd = intervals[i][1];
            }
        }

        return count;
    }
};
